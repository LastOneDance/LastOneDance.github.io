/// <reference path="public.js" />
/// 公共JS方法var jsDo_SendNO = 1;
//=1表示拟稿时填文号,=0表示分发时填文号

function fnGetControlObjByIDOrObj(ControlIDOrObj) {
    /// <summary>通过控件ID或控件对象，获取控件对象</summary>
    /// <param name="ControlIDOrObj" type="Object">控件ID或控件对象</param>
    if (ControlIDOrObj == null || ControlIDOrObj.toString() == "") return null;
    if (typeof (ControlIDOrObj) != "object")
        ControlIDOrObj = document.getElementById(ControlIDOrObj);
    return ControlIDOrObj;
}

function CheckDate(ctlName, errMsg) {
    /// <summary>检查页面文本框的时间是否合法。说明：如果合法则不做任何事返回1，不合法则提示信息并返回0，不执行。（格式：2004-02-19）</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    ctlName = fnGetControlObjByIDOrObj(ctlName);
    if (ctlName == null) return 1; //控件不存在时不验证
    if (ChkDate(ctlName.value) == 0) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    return 1;
}

// 功能：检查页面输入的文本框是否为空值
// 函数名：CheckEmpty
// @ ctlName:页面的控件名称或ID
// @ err_msg:错误提示信息
// @ IsVerifyExistHTML:是否验证控件的值存在 HTML 格式，真表示进行验证，反之。
// @ VerifyErrorKey:验证错误提示的关键字
// 说明：如果不为空则不做任何事，为空则提示信息并返回，不执行。
function CheckEmpty(ctlName, errMsg, IsVerifyExistHTML, VerifyErrorKey) {
    /// <summary>检查页面输入的文本框是否为空值。说明：如果不为空则不做任何事返回1，为空则提示信息并返回0，不执行。</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    /// <param name="IsVerifyExistHTML" type="Boolean">是否验证控件的值存在 HTML 格式，真表示进行验证，反之。</param>
    /// <param name="VerifyErrorKey" type="String">验证错误提示的关键字</param>
    ctlName = fnGetControlObjByIDOrObj(ctlName);
    if (ctlName == null) return 1; //控件不存在时不验证
    if (trim(ctlName.value) == "") {
        alert(errMsg);
        try { ctlName.focus(); } catch (ex) { }
        return 0;
    }
    if (IsVerifyExistHTML == null || IsVerifyExistHTML == "")
        IsVerifyExistHTML = false;
    if (IsVerifyExistHTML) {
        if (VerifyErrorKey == null)
            VerifyErrorKey = "";
        if (ctlName.value.indexOf("<") > -1 || ctlName.value.indexOf(">") > -1) {
            alert(VerifyErrorKey + "不能包含【<】或【>】符号！");
            try { ctlName.focus(); } catch (ex) { }
            return 0;
        }
    }
    return 1;
}

// 功能：检查页面输入的文本框是否为空值并判断长度
// 函数名：CheckEmptyAndAllowLength
// @ ctlName:	页面的控件名称或ID
// @ err_msg:	错误提示信息
// @ ctllen:	控件的值允许最大输入长度(整数)
// @ lenerrMsg:	超出最大长度的提示语
// @ IsVerifyExistHTML:是否验证控件的值存在 HTML 格式，真表示进行验证，反之。
// @ VerifyErrorKey:验证错误提示的关键字
// 说明：如果不为1则不做任何事，为0则提示信息并返回，不执行。
function CheckEmptyAndAllowLength(ctlName, errMsg, ctllen, lenerrMsg, IsVerifyExistHTML, VerifyErrorKey) {
    /// <summary>检查页面输入的文本框是否为空值并判断长度。说明：如果不为1则不做任何事返回1，为0则提示信息并返回0，不执行。</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    /// <param name="ctllen" type="Integer">控件的值允许最大输入长度(整数)</param>
    /// <param name="lenerrMsg" type="String">超出最大长度的提示语</param>
    /// <param name="IsVerifyExistHTML" type="Boolean">是否验证控件的值存在 HTML 格式，真表示进行验证，反之。</param>
    /// <param name="VerifyErrorKey" type="String">验证错误提示的关键字</param>
    var obj = fnGetControlObjByIDOrObj(ctlName);
    if (obj == null) return 1; //控件不存在时不验证
    if (trim(obj.value) == "") {
        alert(errMsg);
        try { obj.focus(); } catch (ex) { }
        return 0;
    }
    if (obj.value.length > ctllen) {
        alert(lenerrMsg);
        try { obj.focus(); } catch (ex) { }
        return 0;
    }
    if (IsVerifyExistHTML == null || IsVerifyExistHTML == "")
        IsVerifyExistHTML = false;
    if (IsVerifyExistHTML) {
        if (VerifyErrorKey == null)
            VerifyErrorKey = "";
        if (obj.value.indexOf("<") > -1 || obj.value.indexOf(">") > -1) {
            alert(VerifyErrorKey + "不能包含【<】或【>】符号！");
            try { obj.focus(); } catch (ex) { }
            return 0;
        }
    }
    return 1;
}

// 功能：检查页面输入的文本框是否符合输入规定的值(不等于ctlValue)
// 函数名：CheckEmpty
// @ ctlName:页面的控件名称或ID
// @ ctlValue:页面的控件值
// @ err_msg:错误提示信息
// 说明：如果不等于ctlValue则不做任何事，等于ctlValue则提示信息并返回，不执行。

function CheckNoEqualValue(ctlName, ctlValue, errMsg) {
    /// <summary>检查页面输入的文本框是否符合输入规定的值(不等于ctlValue)。说明：如果不等于ctlValue则不做任何事返回1，等于ctlValue则提示信息并返回0，不执行。</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="ctlValue" type="String">页面的控件值</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    ctlName = fnGetControlObjByIDOrObj(ctlName);
    if (ctlName == null) return 1; //控件不存在时不验证
    if (trim(ctlName.value) == ctlValue) {
        alert(errMsg);
        try { ctlName.focus(); } catch (ex) { }
        return 0;
    }
    return 1;
}

// 功能：检查页面输入的文本框中的数字是否合法
// 函数名：CheckNumber
// @ ctlName:页面的控件名称或ID
// @ err_msg:错误提示信息
// @ flag:1表示为整数
// 说明：如果为数字则不做任何事，不为数字则提示信息并返回，不执行。

function CheckNumber(ctlName, errMsg, flag) {
    /// <summary>检查页面输入的文本框中的数字是否合法。说明：如果为数字则不做任何事返回1，不为数字则提示信息并返回0，不执行。</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    /// <param name="flag" type="Integer">1表示为整数</param>
    ctlName = fnGetControlObjByIDOrObj(ctlName);
    if (ctlName == null) return 1; //控件不存在时不验证
    if (isNaN(ctlName.value)) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    } else {
        if (flag == 1 && ctlName.value.indexOf(".") != -1) {
            alert(errMsg);
            try { ctlName.select(); } catch (ex) { }
            return 0;
        }
    }
    return 1;
}

// 功能：检查页面输入的文本框中的数字是否合法,小数点是否正确
// 函数名：CheckEXNumber
// @ ctlName:页面的控件名称或ID
// @ err_msg:错误提示信息
// 说明：如果为数字则不做任何事，不为数字则提示信息并返回，不执行。

function CheckEXNumber(ctlName, decimal, numMin, numMax, errMsg) {
    /// <summary>检查页面输入的文本框中的数字是否合法,小数点是否正确。说明：如果为数字则不做任何事返回1，不为数字则提示信息并返回0，不执行。</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="decimal" type="Integer">允许几位小数位</param>
    /// <param name="numMin" type="Float">数字最小值</param>
    /// <param name="numMax" type="Float">数字最大值</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    ctlName = fnGetControlObjByIDOrObj(ctlName);
    if (ctlName == null) return true; //控件不存在时不验证
    if (ctlName.value == "") return true; //为空时不校验
    if (isNaN(ctlName.value)) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    if (decimal == null)
        decimal = 0;
    var start = ctlName.value.indexOf("+");
    if (start > -1) {
        alert("不允许使用符号：“+”！");
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    start = ctlName.value.indexOf(".");
    if (start == ctlName.value.length - 1) {
        alert("最后一位不能是小数位！");
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    if (start >= 0 && decimal.toString() != "" && ctlName.value.substr(start + 1).length > decimal) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    if ((numMin != "" || numMin == "0") && ctlName.value / 1 < numMin) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    if ((numMax != "" || numMax == "0") && ctlName.value / 1 > numMax) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    return 1;
}

// 功能：检查输入的Email地址是否合法
// 函数名：CheckEmail
// @ ctlName:页面的控件名称或ID
// @ err_msg:错误提示信息
// 说明：如果是则不做任何事，不是则提示信息并返回，不执行。

function CheckEmail(ctlName, errMsg) {
    /// <summary>检查输入的Email地址是否合法。说明：如果是则不做任何事返回1，不是则提示信息并返回0，不执行。</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    ctlName = fnGetControlObjByIDOrObj(ctlName);
    if (ctlName == null) return 1; //控件不存在时不验证
    if (ChkEmail(ctlName.value) == 0) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    return 1;
}

// 功能：检查输入的电话号码是否合法
// 函数名：CheckTEL
// @ ctlName:页面的控件名称或ID
// @ err_msg:错误提示信息
// 说明：如果是则不做任何事，不是则提示信息并返回，不执行。

function CheckTEL(ctlName, errMsg) {
    /// <summary>检查输入的电话号码是否合法。说明：如果是则不做任何事返回1，不是则提示信息并返回0，不执行。</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    ctlName = fnGetControlObjByIDOrObj(ctlName);
    if (ctlName == null) return 1; //控件不存在时不验证
    if (ChkTEL(ctlName.value) == 0) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    return 1;
}

// 函数名:CheckDenyStr
// 功能：检查录入框值是否是包含给禁止的字串
// @ ctlName:页面的控件名称或ID
// @ err_msg:错误提示信息
// @ denyStr:要禁止的字串
// 说明：合法则不做任务事，不合法则提示信息并返回，不执行。

function CheckDenyStr(ctlName, errMsg, denyStr) {
    /// <summary>检查录入框值是否是包含给禁止的字串。说明：合法则不做任务事返回1，不合法则提示信息并返回0，不执行。</summary>
    /// <param name="ctlName" type="String">页面的控件名称或ID</param>
    /// <param name="errMsg" type="String">错误提示信息</param>
    /// <param name="denyStr" type="String">要禁止的字串</param>
    ctlName = fnGetControlObjByIDOrObj(ctlName);
    if (ctlName == null) return 1; //控件不存在时不验证
    if (ctlName.value.indexOf(denyStr) != -1) {
        alert(errMsg);
        try { ctlName.select(); } catch (ex) { }
        return 0;
    }
    return 1;
}

// 功能：检查是否为合法的电话号码
// 函数名：ChkTEL
// @ telValue
// 返回值：1为是合法，0为不合法

function ChkTEL(telValue) {
    /// <summary>检查是否为合法的电话号码。返回值：1为是合法，0为不合法</summary>
    /// <param name="telValue" type="String">电话号码</param>
    var regexp = /^(\d{3,4}-?)?\d{7,8}$/;
    if (!regexp.test(telValue)) {
        return 0;
    }
    regexp = null;
    return 1;

    var i, j, strTemp;
    strTemp = "0123456789-()#";
    if (telValue.length == 0) return 0;
    for (i = 0; i < telValue.length; i++) {
        j = strTemp.indexOf(telValue.charAt(i));
        if (j == -1) {
            return 0;
        }
    }
    return 1;
}

// 功能：检查是否为Email地址
// 函数名：ChkEmail
// @ a:要检查的值
// 说明：合法返回1，不合法返回0

function ChkEmail(a) {
    /// <summary>检查是否为Email地址。说明：合法返回1，不合法返回0</summary>
    /// <param name="a" type="String">Email地址</param>
    var i = a.length;
    var temp = a.indexOf('@');
    var tempd = a.indexOf('.');
    if (temp > 1) {
        if ((i - temp) > 3) {
            if (tempd != -1) {
                return 1;
            }
        }
    }
    return 0;
}

/************************************
*文本框特殊符号验证
*************************************/

function checkAllTextValid(form) {
    /// <summary>文本框特殊符号验证</summary>
    /// <param name="form" type="Object">表单对象</param>
    if (form == null)
        form = document.all("temp");
    //记录不含特殊符号的文本框数量    
    var resultTag = 0;
    //记录所有text文本框数量    
    var flag = 0;
    fnCheckCompatibleInputPlaceholderAttribute();
    for (var i = 0; i < form.elements.length; i++) {
        if (form.elements[i].type == "text" || form.elements[i].type == "textarea") {
            flag = flag + 1;
            //此处填写所要过滤的特殊符号    
            //注意：修改####处的字符，其它部分不许修改.    
            //if(/^[^####]*$/.test(form.elements[i].value))     

            if (form.elements[i].value.indexOf('%') != -1)
                try { form.elements[i].focus(); } catch (ex) { }
            else if (/^[^']*$/.test(form.elements[i].value))
                resultTag = resultTag + 1;
            else
                try { form.elements[i].focus(); } catch (ex) { }
        }
    }
    //如果含引号的文本框等于全部文本框的值，则校验通过
    if (resultTag == flag)
        return true;
    else {
        //alert("对不起，请勿输入/n 1. 单引号: ' /n 2. 双引号: /" /n 3. 竖  杠: | /n 4. 尖角号: < > /n请检查输入！");
        alert("对不起，请勿输入【'】或【%】请检查输入！");
        return false;
    }
}

// 功能：验证部分文本框是否特殊符号
// 函数名：CheckPartTextValid
// @ form:	页面form的名称或ID
// @ ExcludectlName:	控件ID，其值为：要排除验证的控件ID，多个控件ID用英文的逗号隔开
// 说明：如果不为真则不做任何事，为真则提示信息并返回，不执行。
function CheckPartTextValid(form, ExcludectlName) {
    /// <summary>验证部分文本框是否特殊符号</summary>
    /// <param name="form" type="Object">表单对象</param>
    /// <param name="ExcludectlName" type="String">控件ID，其值为：要排除验证的控件ID，多个控件ID用英文的逗号隔开</param>
    if (form == null)
        form = document.all("temp");
    //记录不含特殊符号的文本框数量    
    var resultTag = 0;
    //var excludectlarray = document.getElementById(ExcludectlName).value.split(',');
    var excludectlarray = new Array();
    ExcludectlName = fnGetControlObjByIDOrObj(ExcludectlName);
    if (ExcludectlName != null && ExcludectlName.value != "")
        excludectlarray = ExcludectlName.value.split(',');
    //记录所有text文本框数量    
    var flag = 0;
    fnCheckCompatibleInputPlaceholderAttribute();
    var excludectlflag = 0; //排除验证的控件ID的个数
    for (var i = 0; i < form.elements.length; i++) {
        if (form.elements[i].type == "text" || form.elements[i].type == "textarea") {
            flag = flag + 1;
            var jindex = 0;
            for (; jindex < excludectlarray.length; jindex++) {
                if (form.elements[i].id == excludectlarray[jindex]) {
                    excludectlflag = excludectlflag + 1;
                    break;
                }
            }
            if (jindex != excludectlarray.length) {
                continue;
            }
            //此处填写所要过滤的特殊符号    
            //注意：修改####处的字符，其它部分不许修改.    
            //if(/^[^####]*$/.test(form.elements[i].value))	
            if (form.elements[i].value.indexOf('%') != -1)
                try { form.elements[i].focus(); } catch (ex) { }
            else if (/^[^']*$/.test(form.elements[i].value))
                resultTag = resultTag + 1;
            else
                try { form.elements[i].focus(); } catch (ex) { }
        }
    }
    //如果含引号的文本框等于全部文本框的值，则校验通过
    if (resultTag == (flag - excludectlflag))
        return true;
    else {
        //alert("对不起，请勿输入/n 1. 单引号: ' /n 2. 双引号: /" /n 3. 竖  杠: | /n 4. 尖角号: < > /n请检查输入！");
        alert("对不起，请勿输入【'】或【%】请检查输入！");
        return false;
    }
}

// 功能：检查时间是否合法
// 函数名:CheckDate
// @ datestr
// 说明：成功返回1，失败返回0，供本页的CheckDate函数调用

function ChkDate(datestr) {
    /// <summary>检查时间是否合法。说明：成功返回1，失败返回0，供本页的CheckDate函数调用</summary>
    /// <param name="datestr" type="String">时间字符串</param>
    var lthdatestr;
    if (datestr != "")
        lthdatestr = datestr.length;
    else
        lthdatestr = 0;
    var tmpy = "";
    var tmpm = "";
    var tmpd = "";
    //var datestr;
    var status;
    status = 0;
    if (lthdatestr == 0)
        return 0;
    for (var i = 0; i < lthdatestr; i++) {
        if (datestr.charAt(i) == "-") {
            status++;
        }
        if (status > 2) {
            return 0;
        }
        if ((status == 0) && (datestr.charAt(i) != "-")) {
            tmpy = tmpy + datestr.charAt(i);
        }
        if ((status == 1) && (datestr.charAt(i) != "-")) {
            tmpm = tmpm + datestr.charAt(i);
        }
        if ((status == 2) && (datestr.charAt(i) != "-")) {
            tmpd = tmpd + datestr.charAt(i);
        }
    }
    var year = new String(tmpy);
    var month = new String(tmpm);
    var day = new String(tmpd);
    if ((tmpy.length != 4) || (tmpm.length > 2) || (tmpd.length > 2)) {
        return 0;
    }
    if (!((1 <= month) && (12 >= month) && (31 >= day) && (1 <= day))) {
        return 0;
    }
    if (!((year % 4) == 0) && (month == 2) && (day == 29)) {
        return 0;
    }
    if ((month <= 7) && ((month % 2) == 0) && (day >= 31)) {
        return 0;
    }
    if ((month >= 8) && ((month % 2) == 1) && (day >= 31)) {
        return 0;
    }
    if ((month == 2) && (day == 30)) {
        return 0;
    }
    return 1;
}

//格式化日期

function GetFormatDate(TheYear, TheMonth, TheDay) {
    /// <summary>格式化日期（格式：yyyy-MM-dd）</summary>
    /// <param name="TheYear" type="Integer">年</param>
    /// <param name="TheMonth" type="Integer">月</param>
    /// <param name="TheDay" type="Integer">日</param>
    var month = TheMonth;
    var mydate = TheDay;
    if (TheMonth < 10)//判断月份是否小于10，如果小于10那么在前面加上0
    {
        month = "0" + TheMonth;
    }
    if (TheDay < 10)//判断日期是否小于10，如果小于10那么在前面加上0
    {
        mydate = "0" + TheDay;
    }
    return TheYear + "-" + month + "-" + mydate;
}

//根据年月返回该月的天数

function getYearMonthDayNum(year, month) {
    /// <summary>根据年月返回该月的天数</summary>
    /// <param name="year" type="Integer">要查询的年份</param>
    /// <param name="month" type="Integer">要查询的月份</param>
    var dayNum = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    if (new Date(year, 1, 29).getDate() == 29) {
        dayNum[1] = 29;
    }
    return dayNum[month - 1];
}


/**
* FUNC : 打开指定大小的新窗口
* PARM : URL  －－URL
TTL  －－标题
iWID －－宽度
iHIG －－高度
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/
var winop;

function OpenWin(url, ttl, iWid, iHig) {
    /// <summary>打开指定大小的新窗口</summary>
    /// <param name="url" type="String">页面地址</param>
    /// <param name="ttl" type="String">标题</param>
    /// <param name="iWid" type="Integer">宽度</param>
    /// <param name="iHig" type="Integer">高度</param>
    if (winop != null)
        winop.close();
    winop = window.open(url, ttl, "width=" + iWid + ",height=" + iHig + ",left=" + (screen.availWidth - iWid) / 2 + ",top=" + (screen.availHeight - iHig) / 2 + ",toolbar=no,menubar=no,scrollbars=no,resizable=no,location=no,status=yes");
}

/**
* FUNC : 打开指定大小的新窗口,带滚动条
* PARM : URL  －－URL
TTL  －－标题
iWID －－宽度
iHIG －－高度
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/

function OpenWin1(URL, TTL, iWID, iHIG) {
    /// <summary>打开指定大小的新窗口，带滚动条</summary>
    /// <param name="URL" type="String">页面地址</param>
    /// <param name="TTL" type="String">标题</param>
    /// <param name="iWID" type="Integer">宽度</param>
    /// <param name="iHIG" type="Integer">高度</param>
    window.open(URL, TTL, "width=" + iWID + ",height=" + iHIG + ",left=" + (screen.availWidth - iWID) / 2 + ",top=" + (screen.availHeight - iHIG) / 2 + ",toolbar=no,menubar=no,scrollbars=yes,resizable=yes,location=no,status=yes");
}

/**
* FUNC : 打开指定大小的模式新窗口
* PARM : URL  －－URL
TTL  －－标题
iWID －－宽度
iHIG －－高度
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/
var winop1;

function OpenWinD(url, ttl, iWid, iHig) {
    /// <summary>打开指定大小的模式新窗口</summary>
    /// <param name="url" type="String">页面地址</param>
    /// <param name="ttl" type="String">标题</param>
    /// <param name="iWid" type="Integer">宽度</param>
    /// <param name="iHig" type="Integer">高度</param>
    if (winop1 != null)
        winop.close();
    winop = window.open(url, ttl, "width=" + iWid + ",height=" + iHig + ",left=" + (screen.availWidth - iWid) / 2 + ",top=" + (screen.availHeight - iHig) / 2 + ",toolbar=no,menubar=no,scrollbars=yes,resizable=no,location=no,status=yes");
}

/**
* FUNC : 打开屏幕大小的窗口
* PARM : URL  －－URL
TTL  －－标题
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/

function OpenWinFull(url, ttl) {
    /// <summary>打开屏幕大小的窗口</summary>
    /// <param name="url" type="String">页面地址</param>
    /// <param name="ttl" type="String">标题</param>
    window.open(url, ttl, "width=" + screen.availWidth + ",height=" + screen.availHeight + ",left=0,top=0,toolbar=no,menubar=no,scrollbars=yes,resizable=yes,location=no,status=no,fullscreen=no");
}

/**
* FUNC : 打开指定大小的新窗口
* PARM : iWID －－宽度
iHIG －－高度
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/

function SetWin(iWid, iHig) {
    /// <summary>打开指定大小的新窗口</summary>
    /// <param name="iWid" type="Integer">宽度</param>
    /// <param name="iHig" type="Integer">高度</param>
    top.moveTo((screen.availWidth - iWid) / 2, (screen.availHeight - iHig) / 2);
    top.resizeTo(iWid, iHig);
}

/**
* FUNC : 列表控件中的值向下移动
* PARM : cboName  ---列表控件名
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/

function OnMoveAlow(cboName) {
    /// <summary>列表控件中的值向下移动</summary>
    /// <param name="cboName" type="String">列表控件名</param>
    if (cboName.selectedIndex == -1) {
        alert("请选择您要移动的记录!");
        return;
    }
    var vName = null;
    var vEuid = null;
    var length = cboName.options.length - 1;
    for (var j = 0; j <= length - 1; j++) {
        if (cboName.options[j].selected) {

            vName = cboName.options[j + 1].text;
            vEuid = cboName.options[j + 1].value;

            cboName.options[j + 1].text = cboName.options[j].text;
            cboName.options[j + 1].value = cboName.options[j].value;

            cboName.options[j].text = vName;
            cboName.options[j].value = vEuid;
            cboName.options[j].selected = false;
            cboName.options[j + 1].selected = true;
            return;
        }
    }
}

/**
* FUNC : 列表控件中的值向上移动
* PARM : cboName  ---列表控件名
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/

function OnMoveUp(cboName) {
    /// <summary>列表控件中的值向上移动</summary>
    /// <param name="cboName" type="String">列表控件名</param>
    if (cboName.selectedIndex == -1) {
        alert("请选择您要移动的记录！");
        return;
    }
    var vName = null;
    var vEuid = null;
    var length = cboName.options.length - 1;
    for (var j = 1; j <= length; j++) {
        if (cboName.options[j].selected) {

            vName = cboName.options[j - 1].text;
            vEuid = cboName.options[j - 1].value;

            cboName.options[j - 1].text = cboName.options[j].text;
            cboName.options[j - 1].value = cboName.options[j].value;

            cboName.options[j].text = vName;
            cboName.options[j].value = vEuid;

            cboName.options[j].selected = false;
            cboName.options[j - 1].selected = true;
            return;
        }
    }
}

/**
* FUNC : 将选中的值从一个列表框控件1中移到另一个列表控件2中
* PARM : cboName1  ---列表控件名1
*        cboName2  ---列表控件名2
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/

function MoveListToList(cboName1, cboName2) {
    /// <summary>将选中的值从一个列表框控件1中移到另一个列表控件2中</summary>
    /// <param name="cboName1" type="String">列表控件名1</param>
    /// <param name="cboName2" type="String">列表控件名2</param>
    if (cboName1.selectedIndex == -1) {
        alert("请选择你要移动的记录!");
        return;
    }
    var length1 = cboName1.options.length - 1;
    var n = 0;
    /*向列表控件2中添加控件1中被选中的值 */
    for (var j = 0; j <= length1; j++) {
        if (cboName1.options[j].selected) {
            n = 0;
            for (var k = 0; k < cboName2.options.length; k++) {
                if (cboName1.options[j].value == cboName2.options[k].value) {
                    n++;
                }
            }
            if (n == 0) {
                var oOption = document.createElement('OPTION');
                oOption.text = cboName1.options[j].text;
                oOption.value = cboName1.options[j].value;
                cboName2.options.add(oOption);
            }
        }
    }
    /*删除列表控件1中被选择的值*/
    for (var j = length1; j >= 0; --j) {
        if (cboName1.options[j].selected)
            cboName1.options.remove(j);
    }
}

/**
* FUNC : 选中列表控件中所有的值
* PARM : ListName  ---列表控件名
* RETU : void
* AUTH : Mitnick.Chen
* DESC :
*/

function OnSelListAll(ListName) {
    /// <summary>选中列表控件中所有的值</summary>
    /// <param name="ListName" type="String">列表控件名</param>
    for (var j = ListName.options.length - 1; j >= 0; --j) {
        ListName.options[j].selected = true;
    }
}

/**
* FUNC : 判断两个文本控件的值是否相等
* PARM : cboName1  －－文本控件1
cboName2  －－文本控件2
sMess     －－提示信息
* RETU : 
* AUTH : Mitnick.Chen
* DESC :
*/

function IsTVEqls(cboName1, cboName2, sMess) {
    /// <summary>判断两个文本控件的值是否相等</summary>
    /// <param name="cboName1" type="String">文本控件1</param>
    /// <param name="cboName2" type="String">文本控件2</param>
    /// <param name="sMess" type="String">提示信息</param>
    if (document.getElementById(cboName1).value != document.getElementById(cboName2).value) {
        alert(sMess);
        document.getElementById(cboName1).value = "";
        document.getElementById(cboName2).value = "";
        try { document.getElementById(cboName1).select(); } catch (ex) { }
        return 0;
    }
    return 1;
}

/**
* FUNC : 校验账号：只能输入1-30个字母、数字、下划线或小数点。且首字母必须是字母、数字或下划线！
* PARM : cboName   －－文本控件
sMess     －－提示信息
* RETU : 
* AUTH : Mitnick.Chen
* DESC :
*/

function ChkAccFmt(cboName, sMess) {
    /// <summary>校验账号：只能输入1-30个字母、数字、下划线或小数点。且首字母必须是字母、数字或下划线！</summary>
    /// <param name="cboName" type="String">文本控件</param>
    /// <param name="sMess" type="String">提示信息</param>
    var patrn = /^(\w){1}((\w)|[._]){0,29}$/;
    if (!patrn.exec(document.getElementById(cboName).value)) {
        alert(sMess);
        try { document.getElementById(cboName).select(); } catch (ex) { }
        return 0;
    }
    return 1;
}

/**
* FUNC : 校验控件框文本长度是否有超出限制！
* PARM : cboName   －－文本控件
nLen      ----需要控制的长度
sMess     －－提示信息
* RETU : 
* AUTH : Mitnick.Chen
* DESC :
*/

function IsBound(cboName, nLen, sMess) {
    /// <summary>校验控件框文本长度是否有超出限制！</summary>
    /// <param name="cboName" type="String">文本控件</param>
    /// <param name="nLen" type="String">需要控制的长度</param>
    /// <param name="sMess" type="String">提示信息</param>
    var len = document.getElementById(cboName).value.length;
    if (len > nLen) {
        alert(sMess);
        try { document.getElementById(cboName).select(); } catch (ex) { }
        return 0;
    }
    return 1;
}

/**
* FUNC : 控制TEXTAREA控件能输入的最大字符数目
* PARM : theValue   －－文本控件值
nLen      ----需要控制的长度
* RETU : 
* AUTH : Mitnick.Chen
* DESC :
*/

function LenCtrl(theValue, nLen) {
    if (theValue.length >= nLen) {
        if (event.keyCode == 8)
            event.returnValue = true;
        else {
            alert('最多字符只能输入' + nLen + '个字符。\n您的输入已经达到上限，所以无法再输入了!');
            event.returnValue = false;
        }
    }
}

/**
* FUNC : 判断输入的字符是否为数字，如果不是，则无法输入
* PARM :
* RETU : 
* AUTH : Mitnick.Chen
* DESC :
*/

function OnInputNum() {
    if (event.keyCode < 48 || event.keyCode > 57) {
        event.returnValue = false;
    }
}


/*
* FUNC : 判断输入的字符是否为浮点，如果不是，则无法输入
* PARM :
* RETU : 
* AUTH : Mitnick.Chen
* DESC :
*/

function OnInputFlt() {
    if ((event.keyCode >= 48 && event.keyCode <= 57) || event.keyCode == 46) {
        event.returnValue = true;
    } else {
        event.returnValue = false;
    }
}

//文本框判空，与数值判断(1)  cyx 2004-04-01

function check_fld(obj, str, flag) {
    if (obj.disabled) return true; //不可用时不校验
    var svalue = obj.value;
    if (flag == 1) {
        if (isNaN(svalue) || (svalue.indexOf(".") != -1)) {
            alert(str);
            try { obj.focus(); } catch (ex) { }
            return false;
        }
    } else if (flag == 2) {
        if (isNaN(svalue)) {
            alert(str);
            try { obj.focus(); } catch (ex) { }
            return false;
        }
    } else {
        if (obj.value == '') {
            alert(str);
            if (obj.disabled == true || obj.style.display == "none")
                return false;
            try { obj.focus(); } catch (ex) { }
            return false;
        }
    }
    return true;
}

//下拉框聚焦  cyx 2004-04-01

function setFocus(property, cboName) {
    for (var i = 0; i < cboName.length; i++) {
        if (cboName[i].value == property) {
            cboName[i].selected = true;
            break;
        }
    }
}

//得到cookie值

function get_cookie_val(cookieName) {
    var cookiePair;
    var cookie_Name;
    var cookieValue;
    var cookie_array = document.cookie.split("; ");
    for (i = 0; i < cookie_array.length; i++) {
        cookiePair = cookie_array[i].split("=");
        cookie_Name = cookiePair[0];
        cookieValue = cookiePair[1];
        if (cookie_Name == cookieName) {
            return unescape(cookieValue);
        }
    }
    return null;
}

//设置cookie值

function set_cookie_val(cookieName, cookieValue, cookieExpire, cookiePath, cookieDomain, cookieSecure) {
    var cookieStr = cookieName + "=" + cookieValue;
    if (cookieExpire) {
        var expdate = new Date();
        var msFromNow = cookieExpire * 24 * 60 * 60 * 1000; //以毫秒计.
        expdate.setTime(expdate.getTime() + msFromNow);
        var expireStr = expdate.toGMTString();
        cookieStr += "; expire=" + expireStr;
    }
    if (cookiePath) {
        cookieStr += "; path=" + cookiePath;
    }
    if (cookieDomain) {
        cookieStr += "; domain=" + cookieDomain;
    }
    if (cookieSecure) {
        cookieStr += "; true";
    }
    document.cookie = cookieStr;
}

var oldcol = "";
//全选或反选函数

function CheckItem() {
    //执行
    var oEl = event.srcElement;
    for (i = 0; i < document.all.tags("input").length; i++) {
        if (document.all.tags("input")(i).id.indexOf("chkItem") != -1) {
            if (oEl.checked) {
                document.all.tags("input")(i).checked = true;
                document.all.tags("input")(i).parentElement.parentElement.style.backgroundColor = '#deecf8';
            } else {
                document.all.tags("input")(i).checked = false;
                document.all.tags("input")(i).parentElement.parentElement.style.backgroundColor = oldcol;
            }
        }
    }
}

function RowMouseOut(e) {
    try {
        if (!e.firstChild.firstChild.checked) {
            e.style.backgroundColor = oldcol;
        } else {
            e.style.backgroundColor = '#deecf8';
        }
    } catch (ex) {
        e.style.backgroundColor = oldcol;
    }
}

function RowMouseOver(e) {
    try {
        if (!e.firstChild.firstChild.checked) {
            oldcol = e.style.backgroundColor;
        }
    } catch (ex) {
        oldcol = e.style.backgroundColor;
    }
    e.style.backgroundColor = '#deecf8';
}

var mObj = null;
var mycolor = "";

function RowMouseClick(e) {
    if (mObj == null) {
        mycolor = e.style.backgroundColor;
        mObj = e;
    } else {
        if (mObj != e) mObj.style.backgroundColor = mycolor;
        mObj = e;
    }
    e.style.backgroundColor = '#cce0fc';
}


var mObj = null;
var mycolor = "";

function RowMouseClick(e) {
    if (mObj == null) {
        mycolor = e.style.backgroundColor;
        mObj = e;
    } else {
        if (mObj != e) mObj.style.backgroundColor = mycolor;
        mObj = e;
    }
    e.style.backgroundColor = '#cce0fc';
}

//得到选中记录数

function GetCheckItemNum() {
    var thisfrm = document.forms[0];
    // 查找Forms里面所有的元素
    var n = 0;
    for (var i = 0; i < thisfrm.length; i++) {
        if (thisfrm.elements[i].id.indexOf("chkItem") != -1) {
            if (thisfrm.elements[i].checked == true) {
                n = n + 1;
            }
        }
    } // for循环结束
    return n;
}

//得到选中记录值

function GetCheckItemVal() {
    var thisfrm = document.forms[0];
    // 查找Forms里面所有的元素
    var s = "";
    for (var i = 0; i < thisfrm.length; i++) {
        if (thisfrm.elements[i].id.indexOf("chkItem") != -1) {
            if (thisfrm.elements[i].checked == true) {
                s += "," + thisfrm.elements[i].value;
            }
        }
    } // for循环结束
    if (s != "") {
        s = s.slice(1);
    }
    return s;
}

//*******************Message----1******************************************************************************************************

//全选或反选函数

function CheckMessageItem() {
    //执行
    var oEl = event.srcElement;
    for (var i = 0; i < document.all.tags("input").length; i++) {
        if (document.all.tags("input")(i).id.indexOf("chkItemIms") != -1) {
            if (oEl.checked) {
                document.all.tags("input")(i).checked = true;
                document.all.tags("input")(i).parentElement.parentElement.style.backgroundColor = '#deecf8';
            } else {
                document.all.tags("input")(i).checked = false;
                document.all.tags("input")(i).parentElement.parentElement.style.backgroundColor = oldcol;
            }
        }
    }
}

//得到选中记录数

function GetMessageImsCheckItemNum() {
    var thisfrm = document.forms[0];
    // 查找Forms里面所有的元素
    var n = 0;
    for (var i = 0; i < thisfrm.length; i++) {
        if (thisfrm.elements[i].id.indexOf("chkItemIms") != -1) {
            if (thisfrm.elements[i].checked == true) {
                n = n + 1;
            }
        }
    } // for循环结束
    return n;
}

//得到选中记录值

function GetMessageCheckItemVal() {
    var thisfrm = document.forms[0];
    // 查找Forms里面所有的元素
    var s = "";
    for (var i = 0; i < thisfrm.length; i++) {
        if (thisfrm.elements[i].id.indexOf("chkItemIms") != -1) {
            if (thisfrm.elements[i].checked == true) {
                s += "," + thisfrm.elements[i].value;
            }
        }
    } // for循环结束
    if (s != "") {
        s = s.slice(1);
    }
    return s;
}

//------------------------------------------------------------------------------------------------------------------------------------------------

//全选或反选函数

function CheckMessageSmsItem() {
    //执行
    var oEl = event.srcElement;
    for (var i = 0; i < document.all.tags("input").length; i++) {
        if (document.all.tags("input")(i).id.indexOf("chkItemSms") != -1) {
            if (oEl.checked) {
                document.all.tags("input")(i).checked = true;
                document.all.tags("input")(i).parentElement.parentElement.style.backgroundColor = '#deecf8';
            } else {
                document.all.tags("input")(i).checked = false;
                document.all.tags("input")(i).parentElement.parentElement.style.backgroundColor = oldcol;
            }
        }
    }
}

//得到选中记录数

function GetMessageSmsCheckItemNum() {
    var thisfrm = document.forms[0];
    // 查找Forms里面所有的元素
    var n = 0;
    for (var i = 0; i < thisfrm.length; i++) {
        if (thisfrm.elements[i].id.indexOf("chkItemSms") != -1) {
            if (thisfrm.elements[i].checked == true) {
                n = n + 1;
            }
        }
    } // for循环结束
    return n;
}

//得到选中记录值

function GetMessageSmsCheckItemVal() {
    var thisfrm = document.forms[0];
    // 查找Forms里面所有的元素
    var s = "";
    for (var i = 0; i < thisfrm.length; i++) {
        if (thisfrm.elements[i].id.indexOf("chkItemSms") != -1) {
            if (thisfrm.elements[i].checked == true) {
                s += "," + thisfrm.elements[i].value;
            }
        }
    } // for循环结束
    if (s != "") {
        s = s.slice(1);
    }
    return s;
}

//*******************Message----2******************************************************************************************************************


function GetCheckItemTR() {
    var thisfrm = document.forms[0];
    // 查找Forms里面所有的元素
    var oTr;
    for (var i = 0; i < thisfrm.length; i++) {
        if (thisfrm.elements[i].id.indexOf("chkItem") != -1) {
            if (thisfrm.elements[i].checked == true) {
                oTr = thisfrm.elements[i].parentNode.parentNode;
                break;
            }
        }
    } // for循环结束
    return oTr;
}

//得到记录数

function GetItemNum() {
    var thisfrm = document.forms[0];
    // 查找Forms里面所有的元素
    var n = 0;
    for (var i = 0; i < thisfrm.length; i++) {
        if (thisfrm.elements[i].id.indexOf("chkItem") != -1) {
            n = n + 1;
        }
    } // for循环结束
    return n;
}


function ltrim(s) {
    return s.replace(/(^\s*)/g, "");
}

function rtrim(s) {
    return s.replace(/(\s*$)/g, "");
}

function trim(s) {
    return rtrim(ltrim(s));
}

/*   
===========================================   
//去除左边的空格   
===========================================   
  
*/
String.prototype.LTrim = function () {
    return this.replace(/(^\s*)/g, "");
};


/*   
===========================================   
//去除右边的空格   
===========================================   
*/
String.prototype.Rtrim = function () {
    return this.replace(/(\s*$)/g, "");
};


/*   
===========================================   
//去除前后空格   
===========================================   
*/
String.prototype.Trim = function () {
    return this.replace(/(^\s*)|(\s*$)/g, "");
};

/*   
===========================================   
//得到左边的字符串   
===========================================   
*/
String.prototype.Left = function (len) {

    if (isNaN(len) || len == null) {
        len = this.length;
    } else {
        if (parseInt(len) < 0 || parseInt(len) > this.length) {
            len = this.length;
        }
    }

    return this.substr(0, len);
};


/*   
===========================================   
//得到右边的字符串   
===========================================   
*/
String.prototype.Right = function (len) {

    if (isNaN(len) || len == null) {
        len = this.length;
    } else {
        if (parseInt(len) < 0 || parseInt(len) > this.length) {
            len = this.length;
        }
    }

    return this.substring(this.length - len, this.length);
};


/*   
===========================================   
//得到中间的字符串,注意从0开始   
===========================================   
*/
String.prototype.Mid = function (start, len) {
    return this.substr(start, len);
};


/*   
===========================================   
//在字符串里查找另一字符串:位置从0开始   
===========================================   
*/
String.prototype.InStr = function (str) {

    if (str == null) {
        str = "";
    }

    return this.indexOf(str);
};

/*   
===========================================   
//在字符串里反向查找另一字符串:位置0开始   
===========================================   
*/
String.prototype.InStrRev = function (str) {

    if (str == null) {
        str = "";
    }

    return this.lastIndexOf(str);
};

/*   
===========================================   
//计算字符串打印长度   
===========================================   
*/
String.prototype.LengthW = function () {
    return this.replace(/[^x00-xff]/g, "**").length;
};

/*   
===========================================   
//是否是正确的IP地址   
===========================================   
*/
String.prototype.isIP = function () {

    var obj = this;
    var exp = /^(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])\.(\d{1,2}|1\d\d|2[0-4]\d|25[0-5])$/;
    var reg = obj.match(exp);
    if (reg == null) {
        //alert("IP地址不合法！");
        return false;
    } else {
        //alert("IP地址合法！");
        return true;
    }

};
/*   
===========================================   
//是否是正确的长日期   
===========================================   
*/
String.prototype.isLongDate = function () {
    var r = this.replace(/(^s*)|(s*$)/g, "").match(/^(d{1,4})-(d{1,2})-(d{1,2}) (d{1,2}):(d{1,2}):(d{1,2})$/);
    if (r == null) {
        return false;
    }
    var d = new Date(r[1], r[3] - 1, r[4], r[5], r[6], r[7]);
    return (d.getFullYear() == r[1] && (d.getMonth() + 1) == r[3] && d.getDate() == r[4] && d.getHours() == r[5] && d.getMinutes() == r[6] && d.getSeconds() == r[7]);
};

/*   
===========================================   
//是否是正确的短日期   
===========================================   
*/
String.prototype.isShortDate = function () {
    var r = this.replace(/(^s*)|(s*$)/g, "").match(/^(d{1,4})-(d{1,2})2(d{1,2})$/);
    if (r == null) {
        return false;
    }
    var d = new Date(r[1], r[3] - 1, r[4]);
    return (d.getFullYear() == r[1] && (d.getMonth() + 1) == r[3] && d.getDate() == r[4]);
};

/*   
===========================================   
//是否是正确的日期   
===========================================   
*/
String.prototype.isDate = function () {
    return this.isLongDate() || this.isShortDate();
};

/*   
===========================================   
//是否是手机   
===========================================   
*/
String.prototype.isMobile = function () {
    /* return /^0{0,1}13[0-9]{9}$/.test(this);*/
    return /^(((13[0-9]{1})|(14[0-9]{1})|(15[0-9]{1})|(16[0-9]{1})|(17[0-9]{1})|(18[0-9]{1})|(19[0-9]{1}))+\d{8})$/.test(this);
};
/*   
===========================================   
//是否是邮件   
===========================================   
*/
String.prototype.isEmail = function () {
    return /^w+((-w+)|(.w+))*@[A-Za-z0-9]+((.|-)[A-Za-z0-9]+)*.[A-Za-z0-9]+$/.test(this);
};

/*   
===========================================   
//是否是邮编(中国)   
===========================================   
*/

String.prototype.isZipCode = function () {
    return /^[d]{6}$/.test(this);
};

/*   
===========================================   
//是否是有汉字   
===========================================   
*/
String.prototype.existChinese = function () {
    //[u4E00-u9FA5]為漢字﹐[uFE30-uFFA0]為全角符號    
    return /^[x00-xff]*$/.test(this);
};

/*   
===========================================   
//是否是合法的文件名/目录名   
===========================================   
*/
String.prototype.isFileName = function () {
    return !/[\\\/\*\?\|:"<>]/g.test(this);
};

/*   
===========================================   
//是否是有效的电话号码(中国)   
===========================================   
*/
String.prototype.isPhoneCall = function () {
    return /(^[0-9]{3,4}-[0-9]{3,8}$)|(^[0-9]{3,8}$)|(^([0-9]{3,4})[0-9]{3,8}$)|(^0{0,1}13[0-9]{9}$)/.test(this);
};
/*   
===========================================   
//是否是颜色(#FFFFFF形式)   
===========================================   
*/
String.prototype.IsColor = function () {
    var temp = this;
    if (temp == "") return true;
    if (temp.length != 7) return false;
    return (temp.search(/#[a-fA-F0-9]{6}/) != -1);
};

/*   
===========================================   
//转换成全角   
===========================================   
*/
String.prototype.toCase = function () {
    var tmp = "";
    for (var i = 0; i < this.length; i++) {
        if (this.charCodeAt(i) > 0 && this.charCodeAt(i) < 255) {
            tmp += String.fromCharCode(this.charCodeAt(i) + 65248);
        } else {
            tmp += String.fromCharCode(this.charCodeAt(i));
        }
    }
    return tmp;
};
/*   
===========================================   
//对字符串进行Html编码   
===========================================   
*/
String.prototype.toHtmlEncode = function () {
    var str = this;

    str = str.replace(/&/g, "&");
    str = str.replace(/</g, "<");
    str = str.replace(/>/g, ">");
    str = str.replace(/'/g, "&apos;");
    str = str.replace(/(\r\n)/g, "<br>");
    str = str.replace(/ /g, " ");
    str = str.replace(/t/g, "    ");

    return str;
};

/*   
===========================================   
//转换成日期   
===========================================   
*/
String.prototype.toDate = function () {
    try {
        return new Date(this.replace(/-/g, "/"));
    } catch (e) {
        return null;
    }
};
/*   
===========================================   
//身份证验证 
===========================================   
*/
String.prototype.isIDCardNo = function (ctlName) {
    /// <summary>身份证号码为15位或者18位，15位时全为数字，18位前17位为数字，最后一位是校验位，可能为数字或字符X  </summary>
    //    var reg = /(^\d{15}$)|(^\d{18}$)|(^\d{17}(\d|X|x)$)/;
    //    if (reg.test(this)==false) {
    //        alert("身份证号格式不正确！");
    //        document.getElementById(ctlName).focus();
    //        return false;
    //    }
    checkIdcard(document.getElementById(ctlName).value);
    return true;
}
/*   
===========================================   
//是否是包含字母或数字   
===========================================   
*/
String.prototype.isLetterNumber = function () {
    /// <summary>是否是包含字母或数字  </summary>
    return /(^[A-Za-z0-9]+$)/.test(this);
};
function toHtmlEncode(str) {
    //    str=str.replace(/&/g,"&");   
    //    str=str.replace(/</g,"<");   
    //    str=str.replace(/>/g,">");   
    str = str.replace(/'/g, "&apos;");
    str = str.replace(/(\r\n)/g, "<br>");
    //    str=str.replace(/ /g," ");   
    //    str=str.replace(/t/g,"    ");   
    return str;
}

function toTextEncode(str) {
    //    str=str.replace(/&/g,"&");   
    //    str=str.replace(/</g,"<");   
    //    str=str.replace(/>/g,">");   
    str = str.replace(/(&apos;)/g, "'");
    str = str.replace(/(<BR>)/g, "\r\n");
    //    str=str.replace(/ /g," ");   
    //    str=str.replace(/    /g,"t");   
    return str;
}

function OpenWindowm(urlW, widthW, heightW, nwin) {
    var thedate = new Date();
    if (urlW.indexOf("?") != -1) {
        urlW = urlW + "&time=" + thedate.getTime();
    } else {
        urlW = urlW + "?time=" + thedate.getTime();
    }
    window.open(urlW, nwin, "resizable=yes,menubar=no,toolbar=no,location=no,directories=no,status=no,width=" + widthW + ",height=" + heightW + ",left=" + (screen.height / 2) + ",top=300,scrollbars=yes");
    return;
}

function winclose() {
    window.opener = null;
    window.close();
}

function OpenD(urlD, widthD, heightD, sbarW) {
    var thedate = new Date();
    if (urlD.indexOf("?") != -1) {
        urlD = urlD + "&time=" + thedate.getTime();
    } else {
        urlD = urlD + "?time=" + thedate.getTime();
    }

    var rv = window.showModalDialog(urlD, window, "dialogWidth=" + widthD + "px;dialogHeight=" + heightD + "px;status=0;scroll=" + sbarW + "");

    if (rv == "True") {
        location.reload(true);
    } else {
        eval(rv);
    }
}

/// 兼容 input 标签使用 placeholder 属性，必须在任何相关的 input 标签设置聚焦（即 onfocus() 方法）前调用
/// 使用方法：对应的 input 标签必须使用 placeholder 属性
/// 编写者：Mr Wang
/// 更新时间：2015-04-03
function fnCompatibleInputPlaceholderAttribute() {
    /// <summary>兼容 input 标签使用 placeholder 属性，必须在任何相关的 input 标签设置聚焦（即 onfocus() 方法）前调用</summary>
    if (document.body != null) {
        if ("placeholder" in document.createElement("input")) { //如果浏览器原生支持placeholder
            return;
        }
        var inputArray = document.body.getElementsByTagName("input");
        var validInputArray = new Array();
        var arrayIndex = 0;
        for (arrayIndex = 0; arrayIndex < inputArray.length; arrayIndex++) {
            if (inputArray[arrayIndex].type == "text") {
                if (inputArray[arrayIndex].getAttribute("placeholder") != null && inputArray[arrayIndex].getAttribute("placeholder") != "")
                    validInputArray[validInputArray.length] = inputArray[arrayIndex];
            }
        }
        for (arrayIndex = 0; arrayIndex < validInputArray.length; arrayIndex++) {
            if (validInputArray[arrayIndex].value == "")
                validInputArray[arrayIndex].value = validInputArray[arrayIndex].getAttribute("placeholder");
            validInputArray[arrayIndex].setAttribute("dataorgcolor", validInputArray[arrayIndex].style.color);
            validInputArray[arrayIndex].style.color = "#A9A9A9";
            validInputArray[arrayIndex].onfocus = function () {
                if (this.value == this.getAttribute("placeholder")) {
                    this.value = "";
                    this.style.color = "#A9A9A9";
                }
                else {
                    this.style.color = this.getAttribute("dataorgcolor");
                }
            }
            validInputArray[arrayIndex].onblur = function () {
                if (this.value == "") {
                    this.value = this.getAttribute("placeholder");
                    this.style.color = "#A9A9A9";
                } else {
                    this.style.color = this.getAttribute("dataorgcolor");
                }
            }
            validInputArray[arrayIndex].onkeydown = function () {
                this.style.color = this.getAttribute("dataorgcolor");
            }
        }
        inputArray = null;
        arrayIndex = null;
        validInputArray = null;
    }
}

/// 检查兼容 input 标签使用 placeholder 属性，如果值为属性 placeholder 的值，将自动清空
/// 编写者：Mr Wang
/// 更新时间：2015-04-03
function fnCheckCompatibleInputPlaceholderAttribute() {
    /// <summary>检查兼容 input 标签使用 placeholder 属性，如果值为属性 placeholder 的值，将自动清空</summary>
    if (document.body != null) {
        var inputArray = document.body.getElementsByTagName("input");
        var arrayIndex = 0;
        for (arrayIndex = 0; arrayIndex < inputArray.length; arrayIndex++) {
            if (inputArray[arrayIndex].type == "text") {
                if (inputArray[arrayIndex].getAttribute("placeholder") != null && inputArray[arrayIndex].getAttribute("placeholder") != "") {
                    if (trim(inputArray[arrayIndex].value) == inputArray[arrayIndex].getAttribute("placeholder")) {
                        inputArray[arrayIndex].value = "";
                    }
                }
            }
        }
        inputArray = null;
        arrayIndex = null;
    }
}

/// 通过标签ID或标签对象（非表单对象，将会自动遍历获取父级标签进行判断），获取容器表单对象，如果不存在则返回null。
/// 编写者：Mr Wang
/// 更新时间：2015-12-02
function fnGetContainerFormObjectByControlObject(elmIdOrObj) {
    /// <summary>通过标签ID或标签对象，获取容器表单对象，如果不存在则返回null。</summary>
    /// <param name="elmIdOrObj" type="Object">标签ID或标签对象（非表单对象，将会自动遍历获取父级标签进行判断）</param>
    if (elmIdOrObj != null) {
        if (typeof (elmIdOrObj) != "object")
            elmIdOrObj = document.getElementById(elmIdOrObj);
        if (elmIdOrObj != null) {
            if (document.getElementsByTagName("form").length == 1)
                elmIdOrObj = document.getElementsByTagName("form")[0].submit(); //页面就只有一个表单时
            else {
                //页面存在多个表单
                elmIdOrObj = elmIdOrObj.parentNode;
                while (elmIdOrObj != null && elmIdOrObj.nodeName.toLowerCase() != "form") {
                    elmIdOrObj = elmIdOrObj.parentNode;
                }
            }
        }
    }
    return elmIdOrObj;
}

//写cookies
// File Created: 十二月 15, 2015
// File Creator: sjf 苏剑峰 
function setCookie(name, value) {
    /// <summary>设置cookie对象。</summary>
    /// <param name="name" type="string">cookie名称</param>
    /// <param name="value" type="string">cookie值</param>
    var Days = 30;
    var exp = new Date();
    exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
    document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
}
//读取cookie
// File Created: 十二月 15, 2015
// File Creator: sjf 苏剑峰 
function getCookie(name) {
    /// <summary>读取cookie。</summary>
    /// <param name="name" type="string">cookie名称</param>
    var arr, reg = new RegExp("(^| )" + name + "=([^;]*)(;|$)");
    if (arr = document.cookie.match(reg))
        return unescape(arr[2]);
    else
        return null;
}
//删除cookie
// File Created: 十二月 15, 2015
// File Creator: sjf 苏剑峰 
function delCookie(name) {
    /// <summary>删除cookie。</summary>
    /// <param name="name" type="string">cookie名称</param>
    var exp = new Date();
    exp.setTime(exp.getTime() - 1);
    var cval = getCookie(name);
    if (cval != null)
        document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
}


//一下是验证身份证号码的js函数
function checkIdcard(idcard) {
    var Errors = new Array(
                "验证通过!",
                "身份证号码位数不对!",
                "身份证号码出生日期超出范围或含有非法字符!",
                "身份证号码校验错误!",
                "身份证地区非法!"
     );
    var area = { 11: "北京", 12: "天津", 13: "河北", 14: "山西", 15: "内蒙古", 21: "辽宁", 22: "吉林", 23: "黑龙江", 31: "上海", 32: "江苏", 33: "浙江", 34: "安徽", 35: "福建", 36: "江西", 37: "山东", 41: "河南", 42: "湖北", 43: "湖南", 44: "广东", 45: "广西", 46: "海南", 50: "重庆", 51: "四川", 52: "贵州", 53: "云南", 54: "西藏", 61: "陕西", 62: "甘肃", 63: "青海", 64: "宁夏", 65: "新疆", 71: "台湾", 81: "香港", 82: "澳门", 91: "国外" }
    var retflag = false;
    var idcard, Y, JYM;
    var S, M;
    var idcard_array = new Array();
    idcard_array = idcard.split("");
    //地区检验
    if (area[parseInt(idcard.substr(0, 2))] == null) return Errors[4];
    //身份号码位数及格式检验
    switch (idcard.length) {
        case 15:
            if ((parseInt(idcard.substr(6, 2)) + 1900) % 4 == 0 || ((parseInt(idcard.substr(6, 2)) + 1900) % 100 == 0 && (parseInt(idcard.substr(6, 2)) + 1900) % 4 == 0)) {
                ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}$/; //测试出生日期的合法性
            }
            else {
                ereg = /^[1-9][0-9]{5}[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}$/; //测试出生日期的合法性
            }
            if (ereg.test(idcard))
            //  return Errors[0];
                return true;
            else {
                //  return Errors[2];
                return false;
            }
            break;
        case 18:
            //18位身份号码检测
            //出生日期的合法性检查 
            //闰年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))
            //平年月日:((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))
            if (parseInt(idcard.substr(6, 4)) % 4 == 0 || (parseInt(idcard.substr(6, 4)) % 100 == 0 && parseInt(idcard.substr(6, 4)) % 4 == 0)) {
                ereg = /^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|[1-2][0-9]))[0-9]{3}[0-9Xx]$/; //闰年出生日期的合法性正则表达式
            }
            else {
                ereg = /^[1-9][0-9]{5}19[0-9]{2}((01|03|05|07|08|10|12)(0[1-9]|[1-2][0-9]|3[0-1])|(04|06|09|11)(0[1-9]|[1-2][0-9]|30)|02(0[1-9]|1[0-9]|2[0-8]))[0-9]{3}[0-9Xx]$/; //平年出生日期的合法性正则表达式
            }
            if (ereg.test(idcard)) {//测试出生日期的合法性
                //计算校验位
                S = (parseInt(idcard_array[0]) + parseInt(idcard_array[10])) * 7
                    + (parseInt(idcard_array[1]) + parseInt(idcard_array[11])) * 9
                    + (parseInt(idcard_array[2]) + parseInt(idcard_array[12])) * 10
                    + (parseInt(idcard_array[3]) + parseInt(idcard_array[13])) * 5
                    + (parseInt(idcard_array[4]) + parseInt(idcard_array[14])) * 8
                    + (parseInt(idcard_array[5]) + parseInt(idcard_array[15])) * 4
                    + (parseInt(idcard_array[6]) + parseInt(idcard_array[16])) * 2
                    + parseInt(idcard_array[7]) * 1
                    + parseInt(idcard_array[8]) * 6
                    + parseInt(idcard_array[9]) * 3;
                Y = S % 11;
                M = "F";
                JYM = "10X98765432";
                M = JYM.substr(Y, 1); //判断校验位
                if (M == idcard_array[17]) return true; //return Errors[0]; //检测ID的校验位
                else return false; // return Errors[3];
            }
            else return false; // Errors[2];
            break;
        default:
            return false; // Errors[1];
            break;
    }
}